:set prompt "\ESC[34m\STX-> \ESC[m\STX"
:set -Wall
:def pretty \_ -> return ("import qualified Text.Show.Pretty as ShowPretty__\n:set -interactive-print ShowPretty__.pPrint")
:def cpretty \_ -> return ("import qualified Text.Show.Pretty as ShowPretty__\nimport qualified Language.Haskell.HsColour as HSC__\nimport qualified Language.Haskell.HsColour.Colourise as HSCR__\nlet _colorPrint_ = Prelude.putStrLn . HSC__.hscolour HSC__.TTY HSCR__.defaultColourPrefs False False \"\" False . ShowPretty__.ppShow\n:set -interactive-print _colorPrint_")
:def unpretty \_ -> return (":set -interactive-print Prelude.print")

:set -XDataKinds
:set -XTypeApplications
:set -XTypeOperators
:set -XTypeFamilies
:set -XFlexibleContexts
:set -XFlexibleInstances
:set -XGADTs
:set -XTypeSynonymInstances
:set -XTemplateHaskell
:set -XStandaloneDeriving


