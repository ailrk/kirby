#+title: Learning Emacs, and some of my configs.
#+author: Ailrk
#+date: 2020-06-12

* Concepts
    ** Buffer, window, and frame
    Bufer and window is similar Vim. Buffer is a data structure that
    holds a piece of file, window is the manifestation of a
    buffer. You can have different numbers of buffers and windows.

    Everything can be displayed needs a buffer, there is no one off
    buffer like quick list in Vim. Sometimes lots of bufferes open at
    the same time can be spammy.

    It seems Emacs doesn't have a tab system, you can have frame but
    that will open a new gui window.

    ** Mode
    At the bottom of each window there is a bar that shows the
    information of the current buffer. It's a mode line.

    Other than displaying meta information about the file in the
    buffer, mode line also shows the current mode of the buffer.

    Emacs has the concept of editing mode. In a buffer you can have
    one major mode and several minor modes on. For instance, if you
    write haskell, you might use haskell-mode. On the other hand,
    smaller features like autocompelte can be minor mode.

    Switch mode with M-x (or starts any commands)
    Check current mode C-h m

    ** Key chords
    The original Emacs key bindings strongly rely on key chords.
    Two common keys to start a key chord: C-_ and M-_.

    ** Some key chords you need to know even if you use evil mode.
    *** C-x commands
	C-x C-f    Find file
	C-x C-s    Save file
	C-x s      Save some some buffers
	C-x b      Switch buffer
	C-x C-c    Quit Emacs
	C-x 1      Delete till one window left
	C-x u      Undo

    *** M-x commands
    M-x        Invoke commands

    *** Misc
    C-g            Cancel a command
    C-h m          Show Enabled Modes

    *** evil
    For most of the time you don't need to use Emacs default bindings
    at all. There are packages like evil mode that redefine the way
    you interact with emacs

* elisp

  Elisp is not only the scripting language of emacs it's also the
  language that implements emacs itself (70% of emacs is written in
  elisp). This allows you to interact with the editor and extend it
  with a uniform language, everything is techincally transparent
  to you. This is one of the biggest difference from Vim, as everything
  needs to be glued together mannually.

  Elisp is like common lisp, it's a spiritual decedent of Maclisp back
  to the lisp machine days. However, elisp is considerably
  simpler. Common lisp has a spec around 1000 pages, and has lots of
  complicated subsystems, it's really not suitable being a scripting
  langauge of the editor.

  Emacs itself is a giant elisp interpreter. You can evaluate any
  piece of s-expression you see in the editor. Put the
  cursor to the end of the following e-expression and press M-x e will
  evaluate it to 2.
  (+ 1 1)

  Almost everything in emacs is written in elisp. If you want to see
  how things are implemented, there are several querying commands you
  can use. To see current variables, type `C-x h v`; to see current
  functions, type `C-x h f`.


  elisp is lisp1 lisp, which is what lisp should looks like. Lisp2
  lisp should never exists. There is the benefit of overloading
  the name of function and variable, but it's such a minor
  convenience, does it really worth to change the way a language being
  used? In common lisp to pass a higher order function you need to
  prefix the function with #', for a new comer it's very confusing and
  point less. It's pointless indeed, tbh who wants to name their
  function the same as variable anyway?


* package
  Elisp allows you to extend the functionality of emacs
  itself. Because everything is written in elisp, there is no
  difference between your plugin and official functionalities.

  Most pacakges can be get from mepla, a repository hosts many emacs
  pacakges. Pacakges are fetched in form of single elisp project.

  `package` and `use-package` are two elisp packages that helps you to manage
  other packakges. `evil` is the package that gives you vim binding.


* Basic key bindings
  Some basic keybindings to navigate around emacs

* Thoughts
  After I switch to emacs from Vim I feel I care less about the
  environment. I migth be a psychological thing. My Vim config was
  farily complex, and you need to worry about it's interaction with
  other components like tmux and zsh all the time. Emacs provides a
  relatively more pure environment.

  The default theme doesn't look amazing, but it's not terrible
  either. I think I can live with it.
