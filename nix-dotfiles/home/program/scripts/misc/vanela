#!/bin/bash

# Just a simple Lemonbar script
# Only clickable workspaces, window title, and clock
# Spamming command every second using shell to generate statusline is not really efficient
# So I only put those three items
# If I need other status informations
# I'd rather to call them using Dunst

# Workspace indicator is generated using bspc subscribe
# Which only update if there is an reaction on bspwm
# Window title is generated using xtitle
# Which also has subscribe event ability
# Clock is generated using looped date command
# Only update every thirty seconds

# Based on default example from Bspwm GitHub repository
# Some parts are modified to make them look like what i want
# Cheers! Addy
. "$HOME/.cache/wal/colors.sh"

#getcolors () {
#	FOREGROUND=$(xrdb -query | grep 'foreground:'| awk '{print $NF}')
#	BACKGROUND=$(xrdb -query | grep 'background:'| awk '{print $NF}')
#	BLACK=$(xrdb -query | grep 'color0:'| awk '{print $NF}')
#	RED=$(xrdb -query | grep 'color1:'| awk '{print $NF}')
#	GREEN=$(xrdb -query | grep 'color2:'| awk '{print $NF}')
#	YELLOW=$(xrdb -query | grep 'color3:'| awk '{print $NF}')
# BLUE=$(xrdb -query | grep 'color4:'| awk '{print $NF}')
#	MAGENTA=$(xrdb -query | grep 'color5:'| awk '{print $NF}')
#	CYAN=$(xrdb -query | grep 'color6:'| awk '{print $NF}')
#	WHITE=$(xrdb -query | grep 'color7:'| awk '{print $NF}')
#}
#getcolors

# dark
FOREGROUND=$foreground
BACKGROUND=$background
# BACKGROUND="#2b081a"

# light
# FOREGROUND=$background
# BACKGROUND=$color7

BLACK=$color0
RED=$color1
GREEN=$color2
YELLOW=$color3
BLUE=$color4
MAGENTA=$color5
CYAN=$color6
WHITE=$color7

# Panel configurations
#PANEL_HEIGHT=40
#PANEL_WIDTH=3840
PANEL_WIDTH=1920
PANEL_HEIGHT=20

PANEL_HORIZONTAL_OFFSET=1920
PANEL_VERTICAL_OFFSET=1060

PANEL_FONT="Iosevka:size=12:style=Bold"
PANEL_FIFO=/tmp/panel-fifo
PANEL_WM_NAME=bspwm_panel
COLOR_DEFAULT_FG="$FOREGROUND"
COLOR_DEFAULT_BG="$BACKGROUND"
COLOR_MONITOR_FG="$FOREGROUND"
COLOR_MONITOR_BG="$BACKGROUND"
COLOR_FOCUSED_MONITOR_FG="$FOREGROUND"
COLOR_FOCUSED_MONITOR_BG="$CYAN"
COLOR_FREE_FG="$BACKGROUND"
COLOR_FREE_BG="$BACKGROUND"
COLOR_FOCUSED_FREE_FG="$FOREGROUND"
COLOR_FOCUSED_FREE_BG="$BLUE"
COLOR_OCCUPIED_FG="$FOREGROUND"
COLOR_OCCUPIED_BG="$BACKGROUND"
COLOR_FOCUSED_OCCUPIED_FG="$FOREGROUND"
COLOR_FOCUSED_OCCUPIED_BG="$BLUE"
COLOR_URGENT_FG="$FOREGROUND"
COLOR_URGENT_BG="$YELLOW"
COLOR_FOCUSED_URGENT_FG="$FOREGROUND"
COLOR_FOCUSED_URGENT_BG="$YELLOW"
COLOR_STATE_FG="$BACKGROUND"
COLOR_STATE_BG="$BACKGROUND"
COLOR_TITLE_FG="$FOREGROUND"
COLOR_TITLE_BG="$BACKGROUND"
COLOR_SYS_FG="$FOREGROUND"
COLOR_SYS_BG="$RED"
ID=2048

# Just to make sure there is no double process
echo "killing previous lemonbar..."
killall -9 lemonbar xtitle

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

clock() {
    while true; do
        date +"S%b %-d %a | %H:%M:%S"
        sleep 10
    done
}

batt() {
    while true; do
        B=$(acpi | cut -d ',' -f 2 | cut -d ' ' -f 2 | cut -d '%' -f 1)
        if [ $B -le 25 ]; then
            dunstify -t 5000 -r $ID "LOW Battery!"
        fi
        echo "B$B%"
        sleep 900
    done
}

song() {
    echo $(mpc current)
}

# Echo every modules to PANEL_FIFO
clock > "$PANEL_FIFO" &
batt > "$PANEL_FIFO" &
xtitle -t 50 -sf 'T%s\n' > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &
num_mon=$(bspc query -M | wc -l)

# Fetch monitors
MONITORS=$(xrandr | grep -o "^.* connected" | sed "s/ connected//" )

render() {
	case $line in
		S*)
			# clock output
			sys="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
			;;
        B*)
            # battery life
            bat="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"

            ;;
		T*)
			# xtitle output
			title="%{F$COLOR_TITLE_FG}%{B$COLOR_TITLE_BG} ${line#?} %{B-}%{F-}"
			;;
		W*)
			# workspaces output
			wm=
			IFS=':'
			set -- ${line#?}
			while [ $# -gt 0 ] ; do
				item=$1
				name=${item#?}
				case $item in
					[mM]*)
						case $item in
							m*)
								# monitor
								FG=$COLOR_MONITOR_FG
								BG=$COLOR_MONITOR_BG
								on_focused_monitor=
								;;
							M*)
								# focused monitor
								FG=$COLOR_FOCUSED_MONITOR_FG
								BG=$COLOR_FOCUSED_MONITOR_BG
								on_focused_monitor=1
								;;
						esac
						[ $num_mon -lt 2 ] && shift && continue
						wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
						;;
					[fFoOuU]*)
						case $item in
							f*)
								# free desktop
								FG=$COLOR_FREE_FG
								BG=$COLOR_FREE_BG
								UL=$BG
								;;
							F*)
								if [ "$on_focused_monitor" ] ; then
									# focused free desktop
									FG=$COLOR_FOCUSED_FREE_FG
									BG=$COLOR_FOCUSED_FREE_BG
									UL=$BG
								else
									# active free desktop
									FG=$COLOR_FREE_FG
									BG=$COLOR_FREE_BG
									UL=$COLOR_FOCUSED_FREE_BG
								fi
								;;
							o*)
								# occupied desktop
								FG=$COLOR_OCCUPIED_FG
								BG=$COLOR_OCCUPIED_BG
								UL=$BG
								;;
							O*)
								if [ "$on_focused_monitor" ] ; then
									# focused occupied desktop
									FG=$COLOR_FOCUSED_OCCUPIED_FG
									BG=$COLOR_FOCUSED_OCCUPIED_BG
									UL=$BG
								else
									# active occupied desktop
									FG=$COLOR_OCCUPIED_FG
									BG=$COLOR_OCCUPIED_BG
									UL=$COLOR_FOCUSED_OCCUPIED_BG
								fi
								;;
							u*)
								# urgent desktop
								FG=$COLOR_URGENT_FG
								BG=$COLOR_URGENT_BG
								UL=$BG
								;;
							U*)
								if [ "$on_focused_monitor" ] ; then
									# focused urgent desktop
									FG=$COLOR_FOCUSED_URGENT_FG
									BG=$COLOR_FOCUSED_URGENT_BG
									UL=$BG
								else
									# active urgent desktop
									FG=$COLOR_URGENT_FG
									BG=$COLOR_URGENT_BG
									UL=$COLOR_FOCUSED_URGENT_BG
								fi
								;;
						esac
						wm="${wm}%{F${FG}}%{B${BG}}%{U${UL}}%{+u}%{A:bspc desktop -f ${name}:} ${name} %{A}%{B-}%{F-}%{-u}"
						;;
					[LTG]*)
						# layout, state and flags
						wm="${wm}%{F$COLOR_STATE_FG}%{B$COLOR_STATE_BG} ${name} %{B-}%{F-}"
						;;
				esac
				shift
			done
			;;
	esac
  tmp=0
  out="%{l}${wm}%{c}${title}%{r}${sys}%{d}${bat}"
  # for m in $(echo "$MONITORS"); do
  #   barout+="%{S${tmp}}$out}"
  #   let tmp=$tmp+1
  # done
	printf "%s\n" "${out}"
}

panel_bar() {
# handle multiple monitors
while read -r line ; do
  render
done
}

# Get all the results of the modules above then pipe them to Lemonbar
panel_bar < "$PANEL_FIFO" | lemonbar -a 20 \
-g "$PANEL_WIDTH"x"$PANEL_HEIGHT"+"$PANEL_HORIZONTAL_OFFSET"+"$PANEL_VERTICAL_OFFSET" \
-f "$PANEL_FONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" -n "$PANEL_WM_NAME" | bash &

sleep 1
# Trigger the PANEL_FIFO to make it instantly refreshed after bspwmrc reloaded
echo "dummy" > "$PANEL_FIFO"

sleep 1
# Rule the panel to make it hiding below fullscreen window
# I add 'sleep 0.5' to avoid xdo executed before the Lemonbar fully loaded
wid=$(xdo id -a "$PANEL_WM_NAME")
xdo below -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

# Don't close this process
wait
